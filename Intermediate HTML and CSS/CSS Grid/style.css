#container {
    background-color: grey;
    
    display: grid;
    grid-template-columns: 50px 50px 50px;
    grid-template-rows: 50px 50px;


    /* can be shortened using */

    grid-template: 50px 50px / 50px 50px 50px; /* Rows first then columns */




    grid-template: 50px 50px / 250px 50px 50px;
    
    grid-template: 50px 50px / 50px 50px;


    /* You can define values for implicit grid items using this property */

    grid-auto-rows: 50px;
    
    /* Use this to change the default place to add new items in the grid */
    grid-auto-flow: column;
    grid-auto-columns: 50px;


    column-gap: 20px;
    row-gap: 60px;
    
}

#container > div{
    outline: red solid 1px;
} 


#container2 {
    margin-top: 50px;
    display: inline-grid;
    grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
    background-color: lightblue;
}

.room {
    border: 1px solid;
    font-size: 50%;
    text-align: center;
}
  
#living-room {
    grid-column-start: 1;
    grid-column-end: 6;
    grid-row-start: 1;
    grid-row-end: 3;
}

#bathroom {
    /* grid-column-start: 1;
    grid-column-end: 1; */
    grid-row-start: 3;
    grid-row-end: 6;
}

#bedroom {
    grid-column-start: 2;
    grid-column-end: 4;
    grid-row-start: 3;
    grid-row-end: 5;
}
#closet {
    grid-column-start: 2;
    grid-column-end: 4;
    grid-row-start: 5;
    grid-row-end: 6;
}
#kitchen {
    grid-column-start: 4;
    grid-column-end: 6;
    grid-row-start: 3;
    grid-row-end: 6;


    /* you can shorten start-end into one attribute */
    grid-row: 3 / 6;


    /* you can shorten all starts and ends into 1 attribute */
    /*  This is the order
        grid-row-start
        grid-column-start
        grid-row-end
        grid-column-end
    */
    grid-area: 3 / 4 / 6 / 6;


    /* you can also specify the length of the line using "span" */

    grid-row: 3 / span 3;
}


/* you can also use this notation in order to define the layout */

/* #container {
    display: inline-grid;
    grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
    background-color: lightblue; 
    grid-template-areas:
      "living-room living-room living-room living-room living-room"
      "living-room living-room living-room living-room living-room"
      "bedroom bedroom bathroom kitchen kitchen"
      "bedroom bedroom bathroom kitchen kitchen"
      "closet closet . . ."    
} */

/* #living-room {
    grid-area:  living-room;
} */


/* 
    where you specifically give a name to each area in the template-areas
    then use that name in the grid-area

    NOTE:
        "." denotes an empty cell


*/


.grid-container {
    resize: both; /* used in order to allow resizing */
    overflow: auto;
    display: grid;
    gap: 4px;
    padding: 4px;
    border: 1px solid grey;
    background-color: skyblue;
    
    /* grid-template-rows: 150px 150px;
    grid-template-columns: 150px 150px 150px 150px 150px; */


    grid-template-columns: repeat(2, 150px);
    grid-template-rows: repeat(5, 150px);


    /* You can use fr to give the elements a fraction of the container instead of a static value in order to make it more responsive */
    grid-template-rows: repeat(2, 1fr);
    grid-template-columns: repeat(2, 2fr) repeat(3, 1fr);


    /* You can use minmax() to specify the smallest and the largest size the grid track can be */

    grid-template-rows: repeat(2, 1fr);
    grid-template-columns: repeat(5, minmax(150px, 200px));


    /* You can also use clamp(min-size, default-size, max-size) in order to specify minimum, average, and maximum sizes of an item */

    grid-template-columns: repeat(5, clamp(150px, 20%, 200px));


    /* autofit can be used in order to give the grid a number of columns based on a specific width */

    grid-template-columns: repeat(auto-fit, 200px);


    /* when used together with minmax() */
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    
    
    /* autofill works the same way except it doesnt have an upperbound so it will leave a space between the items and the container */
    /* grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); */
    

}
  
.grid-item {
    background-color: #444;
    text-align: center;
    color: #ddd;
    font-family: sans-serif;
    font-size: 1.5rem;
    padding: 12px;
}
  
p {
    margin: 12px auto 24px;
}
  
img {
    height: 60px;
}


