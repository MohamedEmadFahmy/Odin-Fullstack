body {
    background-color: rgb(211, 117, 136);
    font-size: 40px;
    color: white;
}
div {
    margin-top: 50px;
    background-color: white;
}

.empty {
    height: 100px;
    width: 100%;
}


/*  This will select ONLY the DIRECT children of the main (children) */
main > div { 
    background-color: black;
}


/* But this will only select divs that are children of children of main (grandchildren only) */
main > div > div { 
    background-color: rgb(0, 105, 70);
}


/* This rule will only select the div with the class child group2 */
.group1 + div {
    background-color: blueviolet;
}


/* This rule will only select the div with the class child group3 */
.group1 + div + div {
    background-color: fuchsia;
}


/* This rule will select all of .group1's siblings - in this case the 2nd and 3rd .child divs */

/* Note becareful of specificity as double child selector is more specific than a single child selector */
.group1 ~ div {
    background-color: red;
}

/* Pseudo-Selectors: */


/*applies to an element that is currently selected by the user either through selecting it with their cursor or using their keyboard. */
:focus {
    background-color: orange;
}



/* will affect anything under the userâ€™s mouse pointer. It can be used to give extra oomph to buttons and links to highlight that theyâ€™re interactable, or to trigger a drop-down menu. */
:hover {
    background-color: bisque;
}



/* applies to elements that are currently being clicked, and is especially useful for giving your user feedback that their action had an effect. This is a great one to give your buttons and other interactive elements more â€˜tactileâ€™ feedback. */
:active {
    background-color: chartreuse;
}






/* Code for visited link functionality that browsers use */

/* This rule will apply to all links */
a {
    text-decoration: underline;
}

/* This will apply to unvisited links */
a:link {
    color: blue;
}

/* And you guessed it, this applies to all links the user has clicked on */
a:visited {
    color: purple;
}




/* Special Pseudo-Classes*/



/* Represents the top level of your document (html) */
:root {
    color: black;
}



/* Select first/last children of a div*/
:first-child {
    color: rgb(7, 130, 238);
}
:last-child {
    color: orange;
}


/* Select elements with no children and content*/
:empty {
    background-color: rgb(240, 237, 237);
}


/* select elements that have no siblings */
:only-child{
    color: forestgreen;
}


/* Selects the 5th element with class myList */
.myList:nth-child(5) {
    color: black;
}

/* Selects every 3rd element with class myList */
.myList:nth-child(3n) {
    color: black;    
}

/* Selects every 3rd element with class myList, beginning with the 3rd */
.myList:nth-child(3n + 3) {
    color: black;
}

/* Selects every even element with class myList */
.myList:nth-child(even) {
    color: black;
}



/* Pseudo-Elements */

/* allows you to customize the styling of your <li> elementsâ€™ bullets or numbers. */
::marker{
    color: black;
}




/* agive special styling to the first letter or line of some text. */
::first-letter{
    color: black;
}
::first-line{
    color: black;
}





/* allow us to add extra elements onto the page with CSS, instead of HTML. Using it to decorate text in various ways is one common use case. */
.emojify::before {
    content: 'ðŸ˜Ž ðŸ¥¸ ðŸ¤“';
}

.emojify::after {
    content: 'ðŸ¤“ ðŸ¥¸ ðŸ˜Ž';
}






/* Attribute Selectors */


/* This will target any element that has a src attribute. */
[src] {
    color: black;
}


/* This will only target img elements that have a src attribute. */
img[src] {
    color: black;
}


/* This will target img elements with a src attribute that is exactly "puppy.jpg" */
img[src="puppy.jpg"] {
    color: black;
}



/* Pattern matching in attribute names */

/* ^= will match from the start */

/* $= will match from the end */

/* *= will match anywhere */



/* Classes are attributes too!
  This will target any class that begins with 'aus':
  class='austria'
  class='australia'
*/
[class^='aus'] {
    color: black;
}
  

/* This will target any src attribute that ends in '.jpg':
src='puppy.jpg'
src='kitten.jpg'
*/
[src$='.jpg'] {
    color: black;
}



/* This will target any for attribute that has 'ill' anywhere inside it:
for="bill"
for="jill"
for="silly"
for="ill"
*/
[for*='ill'] {
    color: black;
}







